# mav_trajectory_generation/__init__.pyi

from typing import List, Sequence
import numpy as np

# Re-exported submodule
class derivative_order:
    POSITION: int
    VELOCITY: int
    ACCELERATION: int
    JERK: int
    SNAP: int
    ORIENTATION: int
    ANGULAR_VELOCITY: int
    ANGULAR_ACCELERATION: int
    INVALID: int

class Vertex:
    def __init__(self, dimension: int) -> None: ...
    def add_constraint(self, derivative: int, value: float) -> None: ...
    def add_constraint_vec(self, derivative: int, values: np.ndarray) -> None: ...
    def make_start_or_end(self, value: float, up_to_derivative: int) -> None: ...
    def make_start_or_end_vec(self, values: np.ndarray, up_to_derivative: int) -> None: ...
    def remove_constraint(self, derivative: int) -> None: ...
    def has_constraint(self, derivative: int) -> bool: ...
    def get_constraint(self, derivative: int) -> np.ndarray: ...

def estimate_segment_times(
    vertices: List[Vertex],
    v_max: float,
    a_max: float
) -> List[float]: ...

class PolynomialOptimization:
    def __init__(self, dimension: int) -> None: ...
    def setup_from_vertices(
        self,
        vertices: List[Vertex],
        segment_times: Sequence[float],
        derivative_to_optimize: int
    ) -> None: ...
    def solve_linear(self) -> None: ...
    def get_segments(self) -> List["Segment"]: ...

class Segment:
    def get_time(self) -> float: ...
    def get_polynomials(self) -> List[List[float]]: ...
